name: Build Debian Package for Task Service

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install

      - name: Build applications
        run: |
          yarn workspace shared build
          yarn workspace executor build
          yarn workspace customer build
          yarn workspace frontend build

      - name: Create Debian package structure
        run: |
          mkdir -p task-service/DEBIAN
          mkdir -p task-service/usr/local/task-service
          mkdir -p task-service/etc/systemd/system
          mkdir -p task-service/var/lib/task-service

      - name: Copy built applications
        run: |
          cp -r executor/dist/ task-service/usr/local/task-service/executor
          cp -r customer/dist/ task-service/usr/local/task-service/customer
          cp -r frontend/.output/ task-service/usr/local/task-service/frontend
          cp -r shared/ task-service/usr/local/task-service/shared
          cp package.json task-service/usr/local/task-service/
          cp yarn.lock task-service/usr/local/task-service/

      - name: Create control file
        run: |
          cat << 'EOF' > task-service/DEBIAN/control
          Package: task-service
          Version: 1.0.0
          Section: utils
          Priority: optional
          Architecture: all
          Depends: nodejs (>= 18), yarn, rabbitmq-server
          Maintainer: William Linx
          Description: Služba pro exekuci úloh s RabbitMQ
          EOF

      - name: Create systemd service files
        run: |
          cat << 'EOF' > task-service/etc/systemd/system/executor@.service
          [Unit]
          Description=Executor Service Instance %i
          After=network.target

          [Service]
          Type=simple
          User=www-data
          ExecStart=/usr/bin/node /usr/local/task-service/executor/index.js
          Restart=always
          Environment=INSTANCE_ID=%i
          Environment=RABBITMQ_HOST=localhost
          Environment=RABBITMQ_PORT=5672
          Environment=RABBITMQ_USER=guest
          Environment=RABBITMQ_PASSWORD=guest
          Environment=RABBITMQ_TASK_QUEUE_NAME=task_queue
          Environment=RABBITMQ_COMMAND_EXCHANGE_NAME=command_exchange
          Environment=RABBITMQ_REPORT_QUEUE_NAME=report_queue

          [Install]
          WantedBy=multi-user.target
          EOF

          cat << 'EOF' > task-service/etc/systemd/system/customer.service
          [Unit]
          Description=Customer Service
          After=network.target

          [Service]
          Type=simple
          User=www-data
          ExecStart=/usr/bin/node /usr/local/task-service/customer/index.js
          Restart=always
          Environment=RABBITMQ_HOST=localhost
          Environment=RABBITMQ_PORT=5672
          Environment=RABBITMQ_USER=guest
          Environment=RABBITMQ_PASSWORD=guest
          Environment=RABBITMQ_TASK_QUEUE_NAME=task_queue
          Environment=RABBITMQ_COMMAND_EXCHANGE_NAME=command_exchange
          Environment=RABBITMQ_REPORT_QUEUE_NAME=report_queue
          Environment=DB_FILE_NAME=file:/var/lib/task-service/data.db
          Environment=SERVER_PORT=3001

          [Install]
          WantedBy=multi-user.target
          EOF

          cat << 'EOF' > task-service/etc/systemd/system/frontend.service
          [Unit]
          Description=Frontend Service
          After=network.target

          [Service]
          Type=simple
          User=www-data
          ExecStart=/usr/bin/node /usr/local/task-service/frontend/server/index.mjs
          Restart=always
          Environment=NUXT_PUBLIC_API_BASE=http://localhost:3001

          [Install]
          WantedBy=multi-user.target
          EOF

      - name: Create postinst script
        run: |
          cat << 'EOF' > task-service/DEBIAN/postinst
          #!/bin/bash
          set -e

          # Install dependencies using Yarn monorepo
          cd /usr/local/task-service
          yarn install

          # Prepare drizzle-kit config
          cat << 'CATEND' > /usr/local/task-service/customer/drizzle.config.js
          module.exports = {
            out: "./drizzle",
            schema: "./db/schema.js",
            dialect: "sqlite",
            dbCredentials: {
              url: "file:/var/lib/task-service/data.db",
            },
          };
          CATEND

          # Run database creation if the database does not exist (in futuru would be migrations if exists)
          if [ ! -f "/var/lib/task-service/data.db" ]; then
            yarn workspace customer db:push
            # Change ownership of the database file to www-data
            chown www-data:www-data /var/lib/task-service/data.db
            # Ensure write access
            chmod 666 /var/lib/task-service/data.db
          fi

          # Reload systemd daemon
          systemctl daemon-reload

          # Enable services
          systemctl enable executor@1.service
          systemctl enable executor@2.service
          systemctl enable customer.service
          systemctl enable frontend.service

          # Start services
          systemctl start rabbitmq-server
          systemctl start executor@1.service
          systemctl start executor@2.service
          systemctl start customer.service
          systemctl start frontend.service
          EOF
          chmod +x task-service/DEBIAN/postinst

      - name: Build Debian package
        run: dpkg-deb --build task-service

      - name: Upload Debian package
        uses: actions/upload-artifact@v3
        with:
          name: task-service.deb
          path: task-service.deb
